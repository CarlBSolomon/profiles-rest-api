This will contain the steps needed for the various commands

Starting Vagrant
  vagrant up

Accessing the vagrant machine
  vagrant ssh

Disconnect from the machine
  exit

Changing to the synced folder (between the server and local machine)
  cd /Vagrant

Creating a python virtual environment (new file is created in the vagrant server so that it doesnt sync with the vagrant folder)
  python -m venv ~/env

Activating the virtual environment
  source ~/env/bin/activate

Deactivating the virtual environment
  deactivate

installing the requirements for the project (the filename used is where the versions are all listed. Note: these are not the latest versions but those used in the course)
  pip install -r requirements.txt

Creating a new Django project (start a project with the name (as per parameter following it), the last dot indicates that the project must be created in the current root locaton else a sub folder is created)
  django-admin.py startproject profiles_project .

Create one app called profiles_api
  python manage.py startapp profiles_api

Adding apps to the installed apps of the django project
  Access the profiles_project(django project) setting files and add new lines to the INSTALLED_APPS section. We added the following
  'rest_framework', - this is the django rest framework app
  'rest_framework.authtoken', - this is the auth token app - allows us to use the authentication token that comes with the framework
  'profiles_api', - this is the manually created app

Starting our development server
  In the virtual environment folder of the vagrant server type
  python manage.py runserver 0.0.0.0:8000
  0.0.0.0 - means make it available on all available network adpaters on our development server
  8000 says start it on this port

Stop the development server
  Ctrl + C

Creating our own custom  user database model and model manager
  access the models.py file in the app created and import libraries and create classes and objects

setting the django project to use the custom created user database model and manager by accessing the settings file from the django profiles_project and adding the line to the bottom of the file
  AUTH_USER_MODEL = 'profiles_api.UserProfile'

create migrations and DB
  this is done from the venv on vagrant server
    python manage.py makemigrations profiles_api

run migrations
    python manage.py migrate

Enabling Django Admin on server
  Before we do this we need to create a superuser so that it has all access. This is done using the django terminal
    python manage.py createsuperuser
    Enter email address
    Enter name
    Enter password

Enable Django Admin
    Add the model to the admin.py file that is automatically created when app is created
    from profiles_api import models



    admin.site.register(models.UserProfile) - this tells the django admin to register the userprofile so that is accessible through the interface.
